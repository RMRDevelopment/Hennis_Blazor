@using Hennis_Models.Dto
@inject IHomePageTileRepository _repo;

<div class="container">
    @foreach (var item in Tiles){
        counter++;
        <div class="row mb-5">
            <div class="d-none d-sm-none d-md-none d-lg-block tile-img-container col-md-3">
                <img class="img-responsive"  src="@($"data:image/png;base64,{Convert.ToBase64String(item?.ImageData)}")" />
            </div>
            <div class="title-container col-md-12 col-lg-9">
                @{
                    string background = counter % 2 != 0 ? "primary-bg" : "secondary-bg";
                }
                <div class="d-flex align-items-center justify-content-center text-center p-4 mb-3 @background">
                    <h2>@item.Title</h2>
                </div>
                <div class="offset-lg-4 col-lg-8 d-flex align-items-start">
                    <p>@((MarkupString)@item.Content)</p>
                </div>
            </div>
        </div>
    }
    
</div>


@code {
    public IEnumerable<HomePageTileDto> Tiles { get; set; } = new List<HomePageTileDto>();
    public int counter { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Tiles = await _repo.GetAllWithImagesAsync(true);
            StateHasChanged();
        }
    }
}
